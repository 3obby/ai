# GCBB Database Configuration and Migration Strategy

## Current Database Architecture

### Primary Components
- **Production Database**: PostgreSQL database hosted on Vercel via Neon
  - Contains valuable live user data, message history, and companion configurations
  - Connected via `DATABASE_URL` environment variable
- **Shadow Database**: Secondary PostgreSQL database for migration validation
  - Configured via `SHADOW_DATABASE_URL` environment variable
  - Used by Prisma to validate migrations before applying them to production

### Prisma ORM Integration
- Using Prisma ORM v6.4.1 for database access and migrations
- Schema defined in `prisma/schema.prisma`
- Migration history stored in `prisma/migrations/` directory

## Migration Strategy

### Safe Migration Process
1. **Preparation**:
   - Always create migrations using the shadow database first
   - Use the command: `npm run db:migrate -- --name <descriptive_name>`
   - Review generated migration files in `prisma/migrations/` before applying

2. **Migration Execution**:
   - Migrations to production are handled automatically by Vercel build process
   - Every push to main triggers `prisma migrate deploy` during build
   - Zero downtime achieved through Prisma's shadow database validation

3. **Schema Drift Management**:
   - When drift is detected (schema doesn't match migration history):
     - For local development: Use `npx prisma migrate reset` (CAUTION: This will clear local data)
     - For production: Create a new migration that aligns the schema with current state using `npx prisma migrate dev --create-only` and then manually edit the migration file

4. **Database Backups**:
   - Neon database on Vercel features automatic daily backups
   - Consider a scheduled manual backup before major schema changes
   - Backup cadence: Daily automated backups, retained for 7 days

### Performance Optimization Migrations

Recently added database optimizations include:

1. **Message Model Optimizations**:
   - Added compound indexes for faster chat history retrieval
   - New indexes: 
     - `@@index([companionId, createdAt])` - Faster timeline queries
     - `@@index([companionId, userId])` - Faster user-specific message filtering
     - `@@index([companionId, userId, createdAt])` - Optimized chat history retrieval

2. **GroupChat Optimizations**:
   - Added index for creator + creation time: `@@index([creatorId, createdAt])`
   - Improves dashboard performance for displaying user's group chats

3. **GroupMessage Optimizations**:
   - Added compound indexes for faster group message retrieval:
     - `@@index([groupChatId, createdAt])` - Timeline queries
     - `@@index([groupChatId, senderId])` - Filtering by participant
     - `@@index([groupChatId, isBot])` - Separating bot/user messages
     - `@@index([groupChatId, senderId, createdAt])` - Comprehensive filtering

## Current Database Issues and Resolution

### Schema Drift Detection

Current drift detected between migration history and actual database:
```
[*] Changed the `Companion` table
  [+] Added index on columns (categoryId, private)
  [+] Added index on columns (private, userId, createdAt)

[*] Changed the `Message` table
  [+] Added index on columns (companionId, userId)

[*] Changed the `UserBurnedTokens` table
  [+] Added index on some columns
```

This indicates that some indexes were added directly to the database without being recorded in the migration history.

### Resolution Plan

To resolve this schema drift while preserving data:

1. **Custom Migration Approach**:
   - Created a manual migration in `prisma/migrations/20250311000000_add_performance_indexes/migration.sql`
   - Used `IF NOT EXISTS` for all index creation to avoid conflicts with existing indexes
   - Added script to apply migration and update Prisma's migration history

2. **Applying the Migration**:
   ```bash
   # Make sure you're in the project root
   node scripts/apply-performance-indexes.js
   ```

3. **Verifying Migration**:
   ```bash
   # Check migration history
   npx prisma migrate status
   
   # Verify indexes exist in database
   npx prisma db execute --file=scripts/verify-indexes.sql
   ```

After applying the migration, the schema should be in sync with the migration history, and all new performance indexes will be available.

## New Performance Optimization Plan

Based on recent performance analysis, we've identified several critical issues that need to be addressed, particularly for anonymous users experiencing slow initial load times (30+ seconds).

### Identified Performance Issues

1. **Slow Database Queries**:
   - Inefficient materialized view existence checks (~3000ms)
   - Slow companion count queries (~5500ms)
   - Redundant queries for the same data

2. **Large API Response Payloads**:
   - Excessive data being sent to anonymous users (5.4MB)
   - Too many details in companion data that aren't needed for initial rendering

3. **Inefficient Caching Strategy**:
   - Short cache TTLs for anonymous users
   - Large objects requiring chunking in Redis
   - No static caching for frequently accessed data

### Performance Optimization Tasks

- [ ] **Apply Database Optimizations**
  - Create optimized materialized view with fewer columns
  - Add partial indexes specifically for anonymous user queries
  - Add index for the Companion public+system query pattern
  - Implement stored procedure for materialized view refreshes

- [ ] **Optimize API Implementation**
  - Replace existing dashboard prefetch implementation with optimized version
  - Skip slow materialized view checks for anonymous users
  - Return minimal data for anonymous users
  - Implement more aggressive caching for anonymous users
  - Add timeout handling with fallback estimates

- [ ] **Implement Static Cache**
  - Create static cache for anonymous dashboard data
  - Implement cron job to refresh materialized views
  - Configure Vercel cron job for automatic refreshes

- [ ] **Improve Redis Caching**
  - Implement smaller chunk sizes for large responses
  - Add versioned cache keys for better cache invalidation
  - Increase cache TTL for anonymous users (10 minutes vs 2 minutes)
  - Implement pipelined operations for better Redis performance

- [ ] **Configure CDN and Edge Caching**
  - Add proper cache headers to API responses
  - Configure Vercel Edge Network caching for anonymous routes

### Expected Performance Improvements

- Initial anonymous user load time: From 30+ seconds to under 500ms
- API response payload size: From 5.4MB to under 500KB
- Database query time: From 5-8 seconds to under 200ms
- Redis memory usage: Significantly reduced chunking needs

## Best Practices for Schema Changes

1. **Non-destructive Changes Only**:
   - Always use additive changes (new tables, columns, indexes)
   - Never delete columns or tables directly in production
   - For deprecating fields, first mark as optional, then remove in a future migration

2. **Batching Strategy**:
   - Group related changes into single migrations
   - Avoid large schema changes that would lock tables for extended periods
   - Prioritize index additions during low-traffic periods

3. **Testing Migrations**:
   - Always test migrations on a copy of production data before deploying
   - Verify query performance before and after changes

4. **Emergency Rollback Plan**:
   - If a migration causes issues:
     1. Don't panic - Neon database allows point-in-time recovery
     2. Create a new migration that reverts the problematic changes
     3. In extreme cases, restore from backup via Vercel dashboard

## Redis Caching Strategy

The platform uses Redis (via Upstash) for performance optimization:

1. **Cache TTL Strategy**:
   - Anonymous users: 300 seconds (5 minutes)
   - Authenticated users: 60 seconds (1 minute)
   - Critical data: No caching

2. **Cache Invalidation**:
   - Automatic expiration via TTL
   - Pattern-based invalidation available through `clearCachePattern` function
   - Companion updates trigger related cache clearing

## Current Optimizations for Bot Response Time

1. **Database Query Optimization**:
   - Added strategic indexes to improve message retrieval speed
   - Compound indexes for common query patterns

2. **Caching Strategy**:
   - Enhanced Redis caching for anonymous users' responses
   - Longer TTL (5 minutes) for anonymous user content

3. **API Response Optimization**:
   - Streaming responses for immediate feedback
   - Background processing of token usage tracking
   - Simplified decision-making process for anonymous users

4. **Implementation Details**:
   - Streaming enabled in `app/api/chat/[chatId]/route.ts`
   - Special fast-path for anonymous users in `app/api/group-chat/[groupId]/chat/route.ts`
   - Enhanced Redis caching in `lib/redis-cache.ts`
   - Optimized database access through new indexes

## Migration Command Reference

```bash
# Create a new migration (safe approach)
npm run db:migrate -- --name descriptive_name_of_change

# Apply migrations (done automatically by Vercel)
npx prisma migrate deploy

# Reset local development database (CAUTION: deletes data)
npx prisma migrate reset

# Generate Prisma client after schema changes
npx prisma generate

# Inspect database schema state
npx prisma db pull
```

IMPORTANT: Always commit migration files to git along with schema changes to ensure consistency across environments. 