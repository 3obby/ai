# GCBB AI Companion Platform - Technical Overview

## Core Architecture
- Next.js 14.2.24 with App Router and TypeScript
- PostgreSQL database with Prisma ORM (v6.4.1)
- OpenAI integration (GPT models via API)
- Authentication via NextAuth (v4.24.11)
- Token-based economy with subscription tiers
- File storage via Vercel Blob
- Tailwind CSS with dark mode theming
- Server Components optimization
- Vercel deployment with Neon PostgreSQL database

## Key Components

### Primary Data Models
- User: Authentication, preferences, token balance, storage tracking
- Companion: AI persona with configurable traits including personality/knowledge/interaction configs
- Chat: Conversation threads between users and companions
- Message: Individual exchanges with metadata and token counts
- CategoryRelation: For organizing companions
- UserSubscription: Subscription status and management (weekly $4.99)
- File/FileGroup: File storage and organization system 
- GroupChat/GroupChatMember: Multi-participant conversation system

### Token Economy System
- Token balance tracking per user
- Subscription-based token allocation (200,000 tokens weekly)
- Token purchases with subscriber discounts (20% off)
- Usage analytics and transaction tracking
- Companion publishing costs (100,000 tokens)

### API Architecture
- `/api/chat/[chatId]`: Message exchange endpoint
- `/api/companions`: List and filter companions
- `/api/companion/[companionId]`: CRUD operations for companions
- `/api/user-progress`: Token usage statistics
- `/api/stripe`: Payment processing
- `/api/files`: File management endpoints
- `/api/group-chat`: Group chat configuration

## App Router Structure
- Main dashboard: `/dashboard` (app/(root)/(routes)/dashboard/page.tsx)
- Chat interfaces: `/c/[companionId]` (app/(chat)/(routes)/c/[companionId]/page.tsx)
- Auth routes: `/sign-in`, `/sign-up` (app/(auth)/*)
- Token shop: `/token-shop` (app/token-shop/*)
- Account management: `/account` (app/account/*)
- Subscribe page: `/subscribe` (app/subscribe/*)

## Group Chat Framework

### Core Group Chat Capabilities
- Multiple participants (human and AI companions)
- Custom instruction injection
- Message routing and visibility controls
- Context management
- Tool access configuration per participant

### Message Processing Pipeline
- Pre-processing hooks for message transformation
- Custom validation rules
- Post-processing for special formatting
- Message type handling (action, dialogue, meta-command)

### Role-Based Access System
- Participant type definitions
- Permission sets for different roles
- Dynamic role assignment
- State-dependent capability adjustments

### File Integration
- 5GB storage limit per user account
- Support for documents, images, and other file types
- File organization with groups/collections
- Secure file access via signed URLs

### Tool Integration Framework
- Plugin architecture for custom tools
- Scoped API access by participant
- Context-aware tool visibility
- Web search integration
- Code execution capabilities

### State Management
- Shared state objects for participants
- Private state scoping
- Conditional state transitions
- Session persistence options

## Specialized Experience Extensions
- Structured group chat configurations
- Game engine capabilities
- Collaborative workspace tools
- Role-playing frameworks

## Development Approach
- Server Components for efficient rendering
- Progressive enhancement for feature detection
- React Context for state management
- Custom hooks for specialized behaviors
- Prisma migrations with shadow database for safe schema changes 