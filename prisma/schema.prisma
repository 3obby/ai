generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([createdAt])
  @@index([updatedAt])
}

model Category {
  id         String      @id @default(uuid())
  name       String
  companions Companion[]

  @@index([name])
}

model Companion {
  id                   String            @id @default(uuid())
  userId               String
  userName             String
  src                  String
  name                 String
  instructions         String
  private              Boolean           @default(false)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  categoryId           String
  isFree               Boolean           @default(false)
  xpEarned             Int               @default(0)
  messageDelay         Int               @default(0)
  sendMultipleMessages Boolean           @default(true)
  customIntroduction   String?
  category             Category          @relation(fields: [categoryId], references: [id])
  groupChats           GroupChatMember[]
  messages             Message[]

  @@index([categoryId])
  @@index([userId])
  @@index([name])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([isFree])
  @@index([private])
}

model Message {
  id          String    @id @default(uuid())
  role        Role
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  companionId String
  userId      String
  companion   Companion @relation(fields: [companionId], references: [id], onDelete: Cascade)

  @@index([companionId])
  @@index([userId])
  @@index([createdAt])
  @@index([role])
}

model DailyMessageCount {
  id     String   @id @default(uuid())
  userId String
  date   DateTime @default(now())
  count  Int      @default(0)

  @@unique([userId, date])
  @@index([userId, date])
  @@index([date])
}

model UserSubscription {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  stripeCustomerId       String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
  price                  Float     @map("price")
  computeMultiplier      Float     @default(1.0)
  includeBaseTokens      Int       @default(1000000)
  lastUsageResetDate     DateTime  @default(now())
  subscriptionType       String?   @default("standard")

  @@index([userId])
  @@index([lastUsageResetDate])
  @@index([subscriptionType])
}

model UserUsage {
  id              String   @id @default(cuid())
  userId          String   @unique
  totalSpent      Float    @default(0)
  availableTokens Int      @default(100)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  email           String   @unique
  totalMoneySpent Float    @default(0)

  @@index([userId])
  @@index([email])
  @@index([createdAt])
  @@index([updatedAt])
}

model UsageTransaction {
  id        String   @id @default(cuid())
  userId    String
  amount    Int
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
}

model CommunityIdea {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  upvotes     Int      @default(0)
  downvotes   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([createdAt])
  @@index([upvotes])
  @@index([downvotes])
}

model GroupChat {
  id        String            @id @default(uuid())
  name      String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  creatorId String
  members   GroupChatMember[]
  messages  GroupMessage[]

  @@index([creatorId])
  @@index([createdAt])
  @@index([name])
}

model GroupChatMember {
  id          String    @id @default(uuid())
  groupChatId String
  companionId String
  joinedAt    DateTime  @default(now())
  companion   Companion @relation(fields: [companionId], references: [id], onDelete: Cascade)
  groupChat   GroupChat @relation(fields: [groupChatId], references: [id], onDelete: Cascade)

  @@unique([groupChatId, companionId])
  @@index([groupChatId])
  @@index([companionId])
  @@index([joinedAt])
}

model GroupMessage {
  id          String    @id @default(uuid())
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  groupChatId String
  isBot       Boolean
  senderId    String
  groupChat   GroupChat @relation(fields: [groupChatId], references: [id], onDelete: Cascade)

  @@index([groupChatId])
  @@index([senderId])
  @@index([createdAt])
  @@index([isBot])
}

enum Role {
  user
  system
  assistant
}

model UserPrompt {
  id        String   @id @default(uuid())
  userId    String
  text      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([isActive])
  @@index([createdAt])
}

// NextAuth required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
