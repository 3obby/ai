generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Shadow database for migrations
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  totalStorage  Int       @default(0)      // Total storage used in bytes
  metadata      Json?     // Add new metadata field for testing migrations

  @@index([createdAt])
  @@index([updatedAt])
}

model Category {
  id         String      @id @default(uuid())
  name       String
  companions Companion[]

  @@index([name])
}

model Companion {
  id                   String             @id @default(uuid())
  userId               String
  userName             String
  src                  String
  name                 String @db.VarChar(255)
  description          String
  instructions         String @db.Text
  seed                 String @db.Text
  private              Boolean            @default(false)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  categoryId           String?
  isFree               Boolean            @default(false)
  tokensBurned         Int                @default(0)
  messageDelay         Int                @default(0)
  sendMultipleMessages Boolean            @default(true)
  customIntroduction   String?
  xpEarned             Int                @default(0)
  
  // New customization fields
  personalityConfig    Json?              // Stores personality settings
  knowledgeConfig      Json?              // Stores knowledge settings
  interactionConfig    Json?              // Stores interaction settings
  toolConfig           Json?              // Stores tool integration settings
  
  category             Category?          @relation(fields: [categoryId], references: [id])
  groupChats           GroupChatMember[]
  messages             Message[]
  userBurnedTokens     UserBurnedTokens[]
  chatConfigs          ChatConfig[]

  global               Boolean            @default(false)
  views                Int                @default(0)
  votes                Int                @default(0)
  
  // Add new fields for enhanced companion configuration
  personality          Json?              @default("{}")
  toolAccess           String[]           @default([])
  version              Int                @default(1)
  
  @@index([categoryId])
  @@index([userId])
  @@index([name])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([isFree])
  @@index([private])
  @@index([global])
}

model Message {
  id          String    @id @default(uuid())
  role        Role
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  companionId String
  userId      String
  companion   Companion @relation(fields: [companionId], references: [id], onDelete: Cascade)

  @@index([companionId])
  @@index([userId])
  @@index([createdAt])
  @@index([role])
}

model DailyMessageCount {
  id     String   @id @default(uuid())
  userId String
  date   DateTime @default(now())
  count  Int      @default(0)

  @@unique([userId, date])
  @@index([userId, date])
  @@index([date])
}

model UserSubscription {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  stripeCustomerId       String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
  price                  Float     @map("price")
  computeMultiplier      Float     @default(1.0)
  includeBaseTokens      Int       @default(1000000)
  lastUsageResetDate     DateTime  @default(now())
  subscriptionType       String?   @default("standard")

  @@index([userId])
  @@index([lastUsageResetDate])
  @@index([subscriptionType])
}

model UserUsage {
  id              String        @id @default(cuid())
  userId          String        @unique
  totalSpent      Float         @default(0)
  availableTokens Int           @default(100)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  email           String        @unique
  totalMoneySpent Float         @default(0)
  transactions    Transaction[]

  @@index([userId])
  @@index([email])
  @@index([createdAt])
  @@index([updatedAt])
}

model Transaction {
  id          String   @id @default(uuid())
  amount      Int
  type        String   // TOKEN_PURCHASE, TOKEN_USAGE, TOKEN_REFILL, etc.
  description String
  metadata    String?  // JSON stringified additional metadata
  createdAt   DateTime @default(now())
  userUsage   UserUsage @relation(fields: [userUsageId], references: [id])
  userUsageId String

  @@index([userUsageId])
  @@index([type])
  @@index([createdAt])
}

model UsageTransaction {
  id        String   @id @default(cuid())
  userId    String
  amount    Int
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
}

model CommunityIdea {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  upvotes     Int      @default(0)
  downvotes   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([createdAt])
  @@index([upvotes])
  @@index([downvotes])
}

model GroupChat {
  id        String            @id @default(uuid())
  name      String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  creatorId String
  members   GroupChatMember[]
  messages  GroupMessage[]
  configs   ChatConfig[]

  @@index([creatorId])
  @@index([createdAt])
  @@index([name])
}

model GroupChatMember {
  id          String    @id @default(uuid())
  groupChatId String
  companionId String
  joinedAt    DateTime  @default(now())
  companion   Companion @relation(fields: [companionId], references: [id], onDelete: Cascade)
  groupChat   GroupChat @relation(fields: [groupChatId], references: [id], onDelete: Cascade)

  @@unique([groupChatId, companionId])
  @@index([groupChatId])
  @@index([companionId])
  @@index([joinedAt])
}

model GroupMessage {
  id          String    @id @default(uuid())
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  groupChatId String
  isBot       Boolean
  senderId    String
  groupChat   GroupChat @relation(fields: [groupChatId], references: [id], onDelete: Cascade)

  @@index([groupChatId])
  @@index([senderId])
  @@index([createdAt])
  @@index([isBot])
}

model UserPrompt {
  id        String   @id @default(uuid())
  userId    String
  text      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([isActive])
  @@index([createdAt])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserBurnedTokens {
  id           String    @id @default(uuid())
  userId       String
  companionId  String
  tokensBurned Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  companion    Companion @relation(fields: [companionId], references: [id], onDelete: Cascade)

  @@unique([userId, companionId])
  @@index([userId])
  @@index([companionId])
  @@index([tokensBurned])
}

enum Role {
  user
  system
  assistant
}

// File management models
model File {
  id           String       @id @default(uuid())
  userId       String
  name         String
  originalName String
  type         String
  size         Int
  url          String
  storagePath  String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  fileGroups   FileToGroup[]
  isPublic     Boolean      @default(false)
  description  String?
  metadata     Json?        // Additional file metadata
  status       FileStatus   @default(PROCESSING)
  tokensCost   Int          @default(0)    // How many tokens this file cost to process

  @@index([userId])
  @@index([createdAt])
  @@index([type])
  @@index([isPublic])
  @@index([status])
}

model FileGroup {
  id          String       @id @default(uuid())
  userId      String
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  files       FileToGroup[]
  color       String?      // Optional color for UI display
  
  @@index([userId])
  @@index([createdAt])
}

model FileToGroup {
  fileId      String
  fileGroupId String
  addedAt     DateTime @default(now())
  file        File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileGroup   FileGroup @relation(fields: [fileGroupId], references: [id], onDelete: Cascade)

  @@id([fileId, fileGroupId])
  @@index([fileId])
  @@index([fileGroupId])
  @@index([addedAt])
}

enum FileStatus {
  PROCESSING    // File is being processed/analyzed
  READY         // File is ready for use
  ERROR         // Error occurred during processing
  DELETED       // Soft-deleted but not removed from storage
}

model ChatConfig {
  id                 String   @id @default(uuid())
  name               String
  description        String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             String
  isTemplate         Boolean  @default(false)
  templateCategory   String?
  
  // Chat dynamics as JSON
  dynamics           Json
  
  // Input handling as JSON
  inputHandling      Json
  
  // Execution rules as JSON
  executionRules     Json
  
  // UI configuration as JSON
  uiConfig           Json?
  
  // Associated entities
  companionId        String?  // For single bot chats
  groupChatId        String?  // For group chats
  
  // Relations
  companion          Companion? @relation(fields: [companionId], references: [id], onDelete: SetNull)
  groupChat          GroupChat? @relation(fields: [groupChatId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([isTemplate])
  @@index([templateCategory])
  @@index([companionId])
  @@index([groupChatId])
}
